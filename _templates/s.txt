
```markdown
---
title: "제목을 입력하세요"
date: YYYY-MM-DD
categories: [카테고리1, 카테고리2]
tags: [태그1, 태그2, 태그3]
excerpt: "이 글에서 다룰 내용을 간단히 요약해주세요. 메인 페이지에 표시됩니다."
author_profile: true
---

# Today I Learned: 제목

## 📚 오늘 학습한 내용

### 1. 주제 1
- 세부 내용 1
- 세부 내용 2
- 세부 내용 3

### 2. 주제 2
- 세부 내용 1
- 세부 내용 2

## 💻 코드 예시

```java
public class Example {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

## 🔍 문제 상황 및 해결 과정

### 문제 상황
- 어떤 문제가 있었는지 설명

### 해결 과정
1. 첫 번째 시도
2. 두 번째 시도
3. 최종 해결책

### 결과
- 해결 후의 결과

## 💡 배운 점

- 핵심 개념 1
- 핵심 개념 2
- 실무 적용 포인트

## 🔗 참고 자료

- [링크 제목](URL)
- [링크 제목](URL)

## 📝 추가로 학습할 것

- 더 깊이 파볼 주제 1
- 더 깊이 파볼 주제 2

## 🎯 다음 목표

- 다음에 학습할 내용
- 실무에 적용할 계획

---

*매일 조금씩이라도 배우고 기록하는 것이 중요합니다! 🚀*
```

아 그리고 항상 _posts/{year}-{month}-{day}-today-i-learned.md 파일로 만들어줘

이 템플릿을 참고하고 주제는 다음태그를 기반으로 검색해서 자동으로 매번 만들어줘
1. 언어 및 기초 (Java Core)

JVM (Java Virtual Machine)

JDK / JRE

Garbage Collection (GC)

ClassLoader

Java Memory Model

Exception Handling

Generics

Collections Framework (List, Set, Map)

Stream API

Lambda Expressions

Functional Interface

Record (Java 14+)

Optional

Annotation

Reflection

Concurrency (Thread, Runnable, Executor)

Synchronized / Lock

CompletableFuture

java.time (Date/Time API)

Serialization/Deserialization

2. 객체지향 & 설계

OOP (Encapsulation, Inheritance, Polymorphism, Abstraction)

SOLID Principles

Design Patterns (Singleton, Factory, Builder, Observer, Strategy, etc.)

DDD (Domain-Driven Design)

POJO

DTO / VO / Entity

Layered Architecture (Controller, Service, Repository)

Hexagonal Architecture

Clean Architecture

CQRS

3. Spring & Spring Boot

Spring Core

Spring IoC (Dependency Injection)

Spring AOP

Spring MVC

Spring Boot Starter

Spring Data JPA

Spring Transaction Management

Spring Security

OAuth2 / JWT

Spring Batch

Spring Cloud (Eureka, Config, Gateway)

Actuator

Validation (@Valid, Bean Validation)

RestTemplate / WebClient

Profiles (환경 분리)

4. 데이터베이스 & ORM

SQL

JDBC

JPA (Java Persistence API)

Hibernate

Entity Lifecycle

FetchType (Lazy/Eager)

N+1 문제

QueryDSL

Transaction Isolation Level

Connection Pool (HikariCP)

Database Indexing

Optimistic / Pessimistic Lock

RDBMS (MySQL, PostgreSQL, MariaDB)

NoSQL (MongoDB, Redis, Cassandra)

Flyway / Liquibase

5. API & 통신

REST API

HATEOAS

GraphQL

gRPC

SOAP

JSON / XML

HTTP Methods (GET, POST, PUT, DELETE, PATCH)

HTTP Status Codes

API Gateway

Rate Limiting

6. 인프라 & 운영

Linux 기본 명령어

CI/CD (Jenkins, GitHub Actions, GitLab CI)

Docker

Kubernetes (K8s)

Cloud (AWS, GCP, Azure)

Nginx / Apache

Reverse Proxy

Load Balancer

Horizontal vs Vertical Scaling

CDN

7. 테스트 & 품질

JUnit 5

Mockito

Testcontainers

Integration Test

Unit Test

TDD (Test-Driven Development)

BDD (Behavior-Driven Development)

Code Coverage (JaCoCo, SonarQube)

Static Analysis (SpotBugs, Checkstyle)

Performance Test (JMeter, Gatling)

8. 성능 & 최적화

Caching (Redis, Caffeine)

Message Queue (Kafka, RabbitMQ, ActiveMQ)

Asynchronous Processing

Event-Driven Architecture

Circuit Breaker (Resilience4j)

Rate Limiting (Bucket4j)

Profiling (VisualVM, YourKit)

Connection Pool Tuning

Monitoring (Prometheus, Grafana, ELK Stack)

Observability (Tracing, Logging, Metrics)

이 100건 외에도 추가로 파생되는것도 알아서 판단해서 제작해줘